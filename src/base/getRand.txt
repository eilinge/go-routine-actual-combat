package main

import (
	"fmt"
	"math/rand"
	"time"
)

//CreateNum ...
func CreateNum(randint *int) {
	rand.Seed(time.Now().UnixNano())
	num := rand.Intn(10000)
	// fmt.Println("num = ", num)
	for {
		if num >= 1000 {
			break // 满足要求则退出循环
		}
	}
	// randint = &num // 值传递
	*randint = num // 引用传递
	// fmt.Printf("changing：%p\n", &randint) // changing：0xc000086020
}

//GetNum int convert slice
func GetNum(s []int, num int) {
	s[0] = num / 1000
	s[1] = num % 1000 / 100
	s[2] = num % 100 / 10
	s[3] = num % 10
	// fmt.Println("s = ", s)
	// fmt.Printf("changing: %v, %p\n", s, s) // changing: [9 9 5 4], 0xc00005c0c0
}

//OnGame ...
func OnGame(s []int) {
	var num int
	randSlic := make([]int, 4)

	// loop input the current num
	for {
		// loop get the current num
		for {
			fmt.Printf("please input 4 number: ")
			fmt.Scan(&num)

			if 999 < num && 10000 > num {
				break
			}
			fmt.Println("your number of input is no current")
		}
		GetNum(randSlic, num)
		n := 0
		for i := 0; i < 4; i++ {
			if randSlic[i] > s[i] {
				fmt.Printf("the %d is bigger\n", i)
			} else if randSlic[i] < s[i] {
				fmt.Printf("the %d is smaller\n", i)
			} else {
				fmt.Printf("the %d is right\n", i)
				n++
			}
		}
		if n == 4 {
			fmt.Println("you are winner")
			break
		}
	}
}

func main() {
	var randNum int
	// fmt.Printf("before change：%p\n", &randNum) // before change：0xc00005e058
	CreateNum(&randNum)
	// fmt.Printf("after change：%p\n", &randNum) // after change：0xc00005e058

	// fmt.Println("randNum is ", randNum)
	randSlic := make([]int, 4)

	// fmt.Printf("before change: %v, %p\n", randSlic, randSlic) // before change: [0 0 0 0], 0xc00005c0c0
	GetNum(randSlic, randNum)
	// fmt.Printf("after change: %v, %p\n", randSlic, randSlic) // after change: [9 9 5 4], 0xc00005c0c0
	OnGame(randSlic)
}
